# -*- coding: utf-8 -*-
"""Spam Mail Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17sGVt0MD5pZhwLDVsc1NNu2yZ5u1UcGU

#Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""#Data collection and Preprocessing"""

#loading the data from CSV file to a pandas dataframe
raw_mail_data = pd.read_csv('/content/mail_data.csv')

print(raw_mail_data)

#replace the null values with null string
mail_data =raw_mail_data.fillna(' ')

#printing the first 5 rows of the dataframe
mail_data.head()

#checking the number of rows and columns in the dataframe
mail_data.shape

"""#Label encoding"""

#label spam mail as 0, ham mail as 1
mail_data.loc[mail_data['Category']=='spam','Category',]=0
mail_data.loc[mail_data['Category']=='ham','Category',]=1

#separating the data as texts and label
x= mail_data['Message']
y= mail_data['Category']

print(x)

print(y)

"""#Splitting the data into training data and test data"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=3)

print(x.shape)
print(x_train.shape)
print(x_test.shape)

"""#Feature Extraction"""

#transform the text data to feature vectors that can be used as input to the logisticRegression
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)
x_train_features= feature_extraction.fit_transform(x_train)
x_test_featrures= feature_extraction.transform(x_test)

#convert y_train and y_test values into integer
y_train= y_train.astype('int')
y_test= y_test.astype('int')

print(x_train_features)

"""#training the Model: LogisticRegression"""

model = LogisticRegression()

#training the model with training dat
model.fit(x_train_features,y_train)



"""#Evaluating the trained model"""

#prediction on training data
prediction_on_training_data= model.predict(x_train_features)
accuracy_on_training_data= accuracy_score(y_train, prediction_on_training_data)

print('Accuracy score on training data: ',accuracy_on_training_data)

#prediction on test data
prediction_on_test_data = model.predict(x_test_featrures)
accuracy_on_test_data= accuracy_score(y_test, prediction_on_test_data)

print('Accuracy score on test data: ',accuracy_on_test_data)

"""#Building the predictive model"""

input_mail= ["Go until jurong point, crazy.. Available only .."]
#convert text to featureVerctors
input_data_features= feature_extraction.transform(input_mail)

#making prediction 
prediction= model.predict(input_data_features)
print(prediction)

if(prediction[0]== 1):
  print("Ham Mail")
else:
  print("Spam Mail")